{"version":3,"file":"primitive-type-checker.js","sources":["../node_modules/@actualwave/type-checker-simple-reporting/index.js","../source/error-reporter.js","../source/utils.js","../node_modules/@actualwave/has-own/has-own.js","../node_modules/@actualwave/type-checker-levels-storage/index.js","../source/checker.js","../source/index.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/* eslint-disable import/prefer-default-export */\n\nconst constructErrorString = (action, name, required, received) => `${action}Error on \"${name}\" instead of \"${required}\" received \"${received}\"`;\n\n/* eslint-disable no-console */\n\nconst ConsoleErrorReporter = (action, name, requiredTypeString, actualTypeString) => console.error(constructErrorString(action, name, requiredTypeString, actualTypeString));\n\nconst ConsoleWarnReporter = (action, name, requiredTypeString, actualTypeString) => console.warn(constructErrorString(action, name, requiredTypeString, actualTypeString));\n\n/* eslint-disable import/prefer-default-export */\n\nconst ThrowErrorReporter = (action, name, requiredTypeString, receivedTypeString) => {\n  throw new Error(constructErrorString(action, name, requiredTypeString, receivedTypeString));\n};\n\nexports.ConsoleErrorReporter = ConsoleErrorReporter;\nexports.ConsoleWarnReporter = ConsoleWarnReporter;\nexports.ThrowErrorReporter = ThrowErrorReporter;\n//# sourceMappingURL=index.js.map\n","import { ConsoleErrorReporter } from '@actualwave/type-checker-simple-reporting';\r\n\r\nlet errorReporter = ConsoleErrorReporter;\r\n\r\nexport const getErrorReporter = () => errorReporter;\r\n\r\nexport const setErrorReporter = (value) => {\r\n  errorReporter = value;\r\n};\r\n","import { getErrorReporter } from './error-reporter';\n\nexport const MERGE = '(Merge)';\nexport const GET_PROPERTY = '(GetProperty)';\nexport const SET_PROPERTY = '(SetProperty)';\nexport const ARGUMENTS = '(Arguments)';\nexport const RETURN_VALUE = '(ReturnValue)';\n\nexport const checkPrimitiveType = (action, storage, target, names, type) => {\n  if (!type) {\n    return true;\n  }\n\n  const { lastName } = names;\n\n  const storedType = storage.hasType(lastName);\n\n  if (storedType) {\n    if (storedType !== type) {\n      const errorReporter = getErrorReporter();\n\n      errorReporter(action, names.toString(), storedType, type);\n\n      return false;\n    }\n  } else {\n    storage.addFor(lastName, type, target);\n  }\n\n  return true;\n};\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst hasOwn = (\n  (has) =>\n  (target, property) =>\n  Boolean(target && has.call(target, property))\n)(Object.prototype.hasOwnProperty);\n\nexports.hasOwn = hasOwn;\nexports.default = hasOwn;","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar hasOwn = _interopDefault(require('@actualwave/has-own'));\n\n/**\n * Do not check or report type inconsistency\n */\nconst REPORT_NEVER = 'never';\n/**\n * Report type inconsistency once, i.e. record all types and report new\n */\nconst REPORT_ONCE = 'once';\n/**\n * Report whenever type is inconsistent with initial\n */\nconst REPORT_ALL = 'all';\n\nconst REPORT_KEY = Symbol('type-checkers:report-level');\nconst PROPERTY_REPORT_KEY = Symbol('type-checkers:property-report-level');\n\nlet globalReportingLevel = REPORT_ALL;\n\nconst validateReportingLevel = level => {\n  switch (level) {\n    case REPORT_NEVER:\n    case REPORT_ONCE:\n      return level;\n    default:\n      return REPORT_ALL;\n  }\n};\n\nconst setGlobalReportingLevel = level => {\n  globalReportingLevel = validateReportingLevel(level);\n};\n\nconst getGlobalReportingLevel = () => globalReportingLevel;\n\nconst setTargetGeneralReportingLevel = (target, level) => {\n  if (level) {\n    target[REPORT_KEY] = validateReportingLevel(level);\n  } else {\n    delete target[REPORT_KEY];\n  }\n};\n\nconst setTargetPropertyReportingLevel = (target, perPropertyLevels) => {\n  if (!perPropertyLevels) {\n    delete target[PROPERTY_REPORT_KEY];\n    return;\n  }\n\n  target[PROPERTY_REPORT_KEY] = Object.keys(perPropertyLevels).reduce((levels, prop) => {\n    levels[prop] = validateReportingLevel(perPropertyLevels[prop]);\n    return levels;\n  }, {});\n};\n\nconst setReportingLevel = (target, generalLevel, perPropertyLevels) => {\n  setTargetGeneralReportingLevel(target, generalLevel);\n  setTargetPropertyReportingLevel(target, perPropertyLevels);\n};\n\nconst getTargetReportingLevel = (target, key) => {\n  if (hasOwn(target[PROPERTY_REPORT_KEY], key)) {\n    return target[PROPERTY_REPORT_KEY][key];\n  }\n\n  return target[REPORT_KEY];\n};\n\nconst getReportingLevel = (target, key) => {\n  let level = getTargetReportingLevel(target, key);\n\n  if (!level) {\n    level = getTargetReportingLevel(target.constructor, key);\n  }\n\n  return level || getGlobalReportingLevel();\n};\n\n/**\n *\n * @param {any} key\n * @param {Set} target\n * @param {Set} source\n */\nconst defaultMergeStrategy = (key, target, source) => {\n  if (!source || !target) {\n    return source || target;\n  }\n\n  source.forEach(type => {\n    if (!target.has(type)) {\n      target.add(type);\n    }\n  });\n\n  return target;\n};\n\nclass TypeInfoStorage {\n  constructor() {\n    this.storage = new Map();\n  }\n\n  has(key) {\n    const info = this.storage.get(key);\n\n    return info && info.size;\n  }\n\n  hasType(key, type) {\n    const info = this.storage.get(key);\n\n    return info && info.has(type);\n  }\n\n  /**\n   *\n   * @param {*} key\n   * @param {Function} callback\n   */\n  get(key, callback) {\n    const info = this.storage.get(key);\n\n    if (info) {\n      info.forEach(type => callback(key, type));\n    }\n  }\n\n  /**\n   * Add to type information for specified key.\n   * @param {*} key\n   * @param {*} type\n   * @param {Number} level\n   */\n  add(key, type, level) {\n    if (!type) return;\n\n    switch (level) {\n      case REPORT_NEVER:\n        this.storage.delete(key);\n        break;\n      case REPORT_ONCE:\n        {\n          const types = this.storage.get(key);\n\n          if (types) {\n            if (!types.has(type)) {\n              types.add(type);\n            }\n          } else {\n            this.storage.set(key, new Set([type]));\n          }\n        }\n        break;\n      case REPORT_ALL:\n      default:\n        {\n          const types = this.storage.get(key);\n\n          if (!types || !types.size) {\n            this.storage.set(key, new Set([type]));\n          }\n        }\n        break;\n    }\n  }\n\n  addFor(key, type, target) {\n    this.add(key, type, getReportingLevel(target, key));\n  }\n\n  /**\n   * Replace types information for specific key\n   * @param {*} key\n   * @param {Set} types\n   * @param {Number} level\n   */\n  set(key, types, level) {\n    if (!types || types.size === 0 || level === REPORT_NEVER) {\n      this.storage.delete(key);\n      return;\n    }\n\n    this.storage.set(key, types);\n  }\n\n  /**\n   *\n   * @param {*} key\n   * @param {Set} types\n   * @param {Object} target\n   */\n  setFor(key, types, target) {\n    return this.set(key, types, getReportingLevel(target, key));\n  }\n\n  clone() {\n    const target = new TypeInfoStorage();\n    this.storage.forEach((types, key) => target.set(key, new Set(types)));\n\n    return target;\n  }\n\n  /**\n   * Copy types from current storage to storage passed as first argument.\n   * @param {Map} storage\n   * @param {Object} [target]\n   * @param {Function} [mergeStrategy]\n   */\n  copyTo(storage, target, mergeStrategy = defaultMergeStrategy) {\n    this.storage.forEach((types, key) => {\n      const level = validateReportingLevel(target && getReportingLevel(target, key));\n\n      switch (level) {\n        case REPORT_ALL:\n        case REPORT_ONCE:\n          if (storage.has(key)) {\n            storage.set(key, mergeStrategy(key, storage.get(key), types, level), level);\n          } else {\n            storage.set(key, new Set(types));\n          }\n          break;\n        case REPORT_NEVER:\n        default:\n          break;\n      }\n    });\n\n    return storage;\n  }\n}\n\nconst createTypesStorage = () => new TypeInfoStorage();\n\nexports.REPORT_ALL = REPORT_ALL;\nexports.REPORT_NEVER = REPORT_NEVER;\nexports.REPORT_ONCE = REPORT_ONCE;\nexports.createTypesStorage = createTypesStorage;\nexports.getGlobalReportingLevel = getGlobalReportingLevel;\nexports.setGlobalReportingLevel = setGlobalReportingLevel;\nexports.getReportingLevel = getReportingLevel;\nexports.setReportingLevel = setReportingLevel;\n//# sourceMappingURL=index.js.map\n","/* eslint-disable class-methods-use-this */\nimport { createTypesStorage } from '@actualwave/type-checker-levels-storage';\n\nimport { getErrorReporter } from './error-reporter';\n\nimport {\n  MERGE,\n  ARGUMENTS,\n  GET_PROPERTY,\n  RETURN_VALUE,\n  SET_PROPERTY,\n  checkPrimitiveType,\n} from './utils';\n\nclass PrimitiveTypeChecker {\n  constructor(collectTypesOnInit = true) {\n    this.collectTypesOnInit = collectTypesOnInit;\n  }\n\n  init(target, cachedStorage = null) {\n    let storage;\n\n    if (cachedStorage) {\n      storage = cachedStorage;\n    } else if (this.collectTypesOnInit) {\n      storage = createTypesStorage();\n      Object.keys(target).forEach((key) =>\n        storage.addFor(key, this.getTypeValue(target[key]), target),\n      );\n    }\n\n    return storage;\n  }\n\n  getTypeValue(value) {\n    if (value === undefined) {\n      return '';\n    }\n\n    const type = typeof value;\n\n    if (type === 'object' && value instanceof Array) {\n      return 'array';\n    }\n\n    return type;\n  }\n\n  /**\n   * FIXME add function to @actualwave/type-checker-levels-storage to merge configs\n   * this function should accept storages and merge strategy callback which will\n   * receive type info and decide what should be merged and what not\n   */\n  mergeConfigs(storage, sourceStorage, names) {\n    const errorReporter = getErrorReporter();\n\n    sourceStorage.copyTo(storage, null, (key, target, source) => {\n      const targetFirstValue = target.values().next().value;\n\n      source.forEach((sourceType) => {\n        if (!target.has(sourceType)) {\n          target.add(sourceType);\n\n          if (targetFirstValue) {\n            errorReporter(MERGE, names, targetFirstValue, sourceType);\n          }\n        }\n      });\n\n      return target;\n    });\n  }\n\n  getProperty(target, names, value, storage) {\n    const type = this.getTypeValue(value);\n\n    /**\n     * FIXME this function also stores new type information, so it must receive target\n     * or reporting level to work properly\n     * or callback to store new type value\n     */\n    return checkPrimitiveType(GET_PROPERTY, storage, target, names, type);\n  }\n\n  setProperty(target, names, value, storage) {\n    const type = this.getTypeValue(value);\n\n    return checkPrimitiveType(SET_PROPERTY, storage, target, names, type);\n  }\n\n  arguments(target, names, args, storage) {\n    const { length } = args;\n    let valid = true;\n\n    for (let index = 0; index < length; index++) {\n      const type = this.getTypeValue(args[index]);\n      const agrValid = checkPrimitiveType(ARGUMENTS, storage, target, names.clone(index), type);\n\n      valid = agrValid && valid;\n    }\n\n    return valid;\n  }\n\n  returnValue(target, names, value, storage) {\n    const type = this.getTypeValue(value);\n\n    const callNames = storage.clone();\n    callNames.appendCustomValue(RETURN_VALUE);\n\n    return checkPrimitiveType(RETURN_VALUE, storage, target, callNames, type);\n  }\n}\n\nexport const createPrimitiveTypeChecker = (collectTypesOnInit) =>\n  new PrimitiveTypeChecker(collectTypesOnInit);\n\nexport default PrimitiveTypeChecker;\n","/* eslint-disable class-methods-use-this */\nimport { getErrorReporter, setErrorReporter } from './error-reporter';\n\nimport {\n  MERGE,\n  ARGUMENTS,\n  GET_PROPERTY,\n  RETURN_VALUE,\n  SET_PROPERTY,\n  checkPrimitiveType,\n} from './utils';\n\nimport PrimitiveTypeChecker, { createPrimitiveTypeChecker } from './checker';\n\nexport {\n  MERGE,\n  ARGUMENTS,\n  GET_PROPERTY,\n  RETURN_VALUE,\n  SET_PROPERTY,\n  checkPrimitiveType,\n  PrimitiveTypeChecker,\n  createPrimitiveTypeChecker,\n  getErrorReporter,\n  setErrorReporter,\n};\n"],"names":["errorReporter","ConsoleErrorReporter","getErrorReporter","setErrorReporter","value","MERGE","GET_PROPERTY","SET_PROPERTY","ARGUMENTS","RETURN_VALUE","checkPrimitiveType","action","storage","target","names","type","lastName","storedType","hasType","toString","addFor","require$$0","PrimitiveTypeChecker","constructor","collectTypesOnInit","init","cachedStorage","createTypesStorage","Object","keys","forEach","key","getTypeValue","undefined","Array","mergeConfigs","sourceStorage","copyTo","source","targetFirstValue","values","next","sourceType","has","add","getProperty","setProperty","arguments","args","length","valid","index","agrValid","clone","returnValue","callNames","appendCustomValue","createPrimitiveTypeChecker"],"mappings":"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"}