{"version":3,"file":"primitive-type-checker.min.js","sources":["../node_modules/@actualwave/type-checkers/source/checkers/utils.js","../source/index.js"],"sourcesContent":["\nexport const GET_PROPERTY = '(GetProperty)';\nexport const SET_PROPERTY = '(SetProperty)';\nexport const INDEX = '(Index)';\nexport const ARGUMENTS = '(Arguments)';\nexport const RETURN_VALUE = '(ReturnValue)';\nexport const MERGE = '(Merge)';\n\nexport function AsIs(value) {\n  if (this instanceof AsIs) {\n    this.value = value;\n  } else {\n    return new AsIs(value);\n  }\n}\n\nfunction asIs() {\n  return this.value;\n}\n\nAsIs.prototype.toString = asIs;\nAsIs.prototype.valueOf = asIs;\nAsIs.prototype[Symbol.toPrimitive] = asIs;\n\nexport const buildPath = (sequence) => sequence\n  .reduce((str, name) => {\n    if (name instanceof AsIs) {\n      str = `${str}${name}`;\n    } else if (String(parseInt(name, 10)) === name) {\n      str = `${str}[${name}]`;\n    } else if (/^[a-z][\\w$]*$/i.test(name)) {\n      str = str ? `${str}.${name}` : name;\n    } else {\n      str = `${str}[\"${name}\"]`;\n    }\n\n    return str;\n  }, '');\n","import {\n  ARGUMENTS,\n  GET_PROPERTY,\n  RETURN_VALUE,\n  SET_PROPERTY,\n  MERGE,\n  buildPath,\n  AsIs,\n} from '@actualwave/type-checkers/source/checkers/utils';\n\nconst checkPrimitiveType = (action, types, name, type, errorReporter, sequence) => {\n  if (!type) {\n    return true;\n  }\n\n  const storedType = types[name];\n\n  if (storedType) {\n    if (storedType !== type) {\n      errorReporter(action, buildPath([...sequence, name]), storedType, type);\n\n      return false;\n    }\n  } else {\n    types[name] = type;\n  }\n\n  return true;\n};\n\nexport const mergeConfigs = ({ types, errorReporter }, source, names = []) => {\n  const sourceTypes = source.types;\n\n  for (const name in sourceTypes) {\n    if (sourceTypes.hasOwnProperty(name)) {\n      const sourceType = sourceTypes[name];\n      const targetType = types[name];\n\n      if (sourceType && targetType && targetType !== sourceType) {\n        errorReporter(MERGE, buildPath([...names, name]), targetType, sourceType);\n      } else {\n        types[name] = sourceType;\n      }\n    }\n  }\n\n  return { types, errorReporter };\n};\n\nexport const getTypeString = (value) => {\n  if (value === undefined) {\n    return '';\n  } else if (value instanceof Array) {\n    return 'array';\n  }\n\n  return typeof value;\n};\n\nconst PrimitiveTypeChecker = {\n  collectTypesOnInit: true,\n  areArrayElementsOfSameType: true,\n\n  init(target, errorReporter, cachedTypes = null) {\n    let types = {};\n\n    if (cachedTypes) {\n      types = cachedTypes;\n    } else if (this.collectTypesOnInit) {\n      Object.keys(target)\n        .forEach((key) => {\n          types[key] = getTypeString(target[key]);\n        });\n    }\n\n    return {\n      types,\n      errorReporter,\n    };\n  },\n\n  getProperty(target, name, value, config, sequence) {\n    const { types, errorReporter } = config;\n    const type = getTypeString(value);\n\n    return checkPrimitiveType(GET_PROPERTY, types, name, type, errorReporter, sequence);\n  },\n\n  setProperty(target, name, newValue, config, sequence) {\n    const { types, errorReporter } = config;\n    const type = getTypeString(newValue);\n\n    return checkPrimitiveType(SET_PROPERTY, types, name, type, errorReporter, sequence);\n  },\n\n  arguments(target, thisArg, args, config, sequence) {\n    const { types, errorReporter } = config;\n\n    const { length } = args;\n    let valid = true;\n\n    for (let index = 0; index < length; index++) {\n      const type = getTypeString(args[index]);\n      const agrValid = checkPrimitiveType(ARGUMENTS, types, String(index), type, errorReporter, sequence);\n\n      valid = agrValid && valid;\n    }\n\n    return valid;\n  },\n\n  returnValue(target, thisArg, value, config, sequence) {\n    const { types, errorReporter } = config;\n\n    const type = getTypeString(value);\n\n    return checkPrimitiveType(RETURN_VALUE, types, AsIs(RETURN_VALUE), type, errorReporter, sequence);\n  },\n  getTypeString,\n  mergeConfigs,\n};\n\nexport default PrimitiveTypeChecker;\n"],"names":["RETURN_VALUE","AsIs","value","this","asIs","prototype","toString","valueOf","Symbol","toPrimitive","buildPath","sequence","reduce","str","name","String","parseInt","test","checkPrimitiveType","action","types","type","errorReporter","storedType","mergeConfigs","source","names","sourceTypes","hasOwnProperty","sourceType","targetType","getTypeString","undefined","Array","PrimitiveTypeChecker","target","cachedTypes","collectTypesOnInit","keys","forEach","key","config","newValue","thisArg","args","length","valid","index"],"mappings":"uMACO,MAIMA,EAAe,gBAGrB,SAASC,EAAKC,GACnB,KAAIC,gBAAgBF,GAGlB,OAAO,IAAIA,EAAKC,GAFhBC,KAAKD,MAAQA,EAMjB,SAASE,IACP,OAAOD,KAAKD,MAGdD,EAAKI,UAAUC,SAAWF,EAC1BH,EAAKI,UAAUE,QAAUH,EACzBH,EAAKI,UAAUG,OAAOC,aAAeL,EAE9B,MAAMM,EAAaC,GAAaA,EACpCC,OAAO,CAACC,EAAKC,IAEVD,EADEC,aAAgBb,KACTY,IAAMC,IACNC,OAAOC,SAASF,EAAM,OAASA,KAC/BD,KAAOC,KACP,iBAAiBG,KAAKH,GACzBD,KAASA,KAAOC,IAASA,KAEtBD,MAAQC,MAIlB,IC3BCI,EAAqB,CAACC,EAAQC,EAAON,EAAMO,EAAMC,EAAeX,SAC/DU,SACI,QAGHE,EAAaH,EAAMN,MAErBS,MACEA,IAAeF,WACHF,EAAQT,MAAcC,EAAUG,IAAQS,EAAYF,IAE3D,SAGHP,GAAQO,SAGT,GAGIG,EAAe,EAAGJ,MAAAA,EAAOE,cAAAA,GAAiBG,EAAQC,cACvDC,EAAcF,EAAOL,UAEtB,MAAMN,KAAQa,KACbA,EAAYC,eAAed,GAAO,OAC9Be,EAAaF,EAAYb,GACzBgB,EAAaV,EAAMN,GAErBe,GAAcC,GAAcA,IAAeD,IDhChC,UCiCQnB,MAAcgB,EAAOZ,IAAQgB,EAAYD,KAExDf,GAAQe,SAKXT,MAAAA,EAAOE,cAAAA,IAGLS,EAAiB7B,QACd8B,IAAV9B,EACK,GACEA,aAAiB+B,MACnB,eAGK/B,EAGVgC,uBACgB,8BACQ,OAEvBC,EAAQb,EAAec,EAAc,UACpChB,YAEAgB,IACMA,EACCjC,KAAKkC,2BACPC,KAAKH,GACTI,QAASC,MACFA,GAAOT,EAAcI,EAAOK,6CAU9BL,EAAQrB,EAAMZ,EAAOuC,EAAQ9B,SACjCS,MAAEA,EAAFE,cAASA,GAAkBmB,EAC3BpB,EAAOU,EAAc7B,UAEpBgB,EDpFiB,gBCoFgBE,EAAON,EAAMO,EAAMC,EAAeX,gBAGhEwB,EAAQrB,EAAM4B,EAAUD,EAAQ9B,SACpCS,MAAEA,EAAFE,cAASA,GAAkBmB,EAC3BpB,EAAOU,EAAcW,UAEpBxB,ED1FiB,gBC0FgBE,EAAON,EAAMO,EAAMC,EAAeX,cAGlEwB,EAAQQ,EAASC,EAAMH,EAAQ9B,SACjCS,MAAEA,EAAFE,cAASA,GAAkBmB,GAE3BI,OAAEA,GAAWD,MACfE,GAAQ,MAEP,IAAIC,EAAQ,EAAGA,EAAQF,EAAQE,IAAS,OACrC1B,EAAOU,EAAca,EAAKG,MACf7B,EDnGE,cCmG4BE,EAAOL,OAAOgC,GAAQ1B,EAAMC,EAAeX,IAEtEmC,SAGfA,eAGGX,EAAQQ,EAASzC,EAAOuC,EAAQ9B,SACpCS,MAAEA,EAAFE,cAASA,GAAkBmB,EAE3BpB,EAAOU,EAAc7B,UAEpBgB,EAAmBlB,EAAcoB,EAAOnB,EAAKD,GAAeqB,EAAMC,EAAeX"}