{"version":3,"file":"primitive-type-checker.min.js","sources":["../node_modules/@actualwave/type-checker-simple-reporting/index.js","../source/error-reporter.js","../source/utils.js","../node_modules/@actualwave/has-own/has-own.js","../node_modules/@actualwave/map-of-sets/index.js","../node_modules/@actualwave/type-checker-levels-storage/index.js","../source/checker.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/* eslint-disable import/prefer-default-export */\n\nconst constructErrorString = (action, name, required, received) => `${action}Error on \"${name}\" instead of \"${required}\" received \"${received}\"`;\n\n/* eslint-disable no-console */\n\nconst ConsoleErrorReporter = (action, name, requiredTypeString, actualTypeString) => console.error(constructErrorString(action, name, requiredTypeString, actualTypeString));\n\nconst ConsoleWarnReporter = (action, name, requiredTypeString, actualTypeString) => console.warn(constructErrorString(action, name, requiredTypeString, actualTypeString));\n\n/* eslint-disable import/prefer-default-export */\n\nconst ThrowErrorReporter = (action, name, requiredTypeString, receivedTypeString) => {\n  throw new Error(constructErrorString(action, name, requiredTypeString, receivedTypeString));\n};\n\nexports.ConsoleErrorReporter = ConsoleErrorReporter;\nexports.ConsoleWarnReporter = ConsoleWarnReporter;\nexports.ThrowErrorReporter = ThrowErrorReporter;\n//# sourceMappingURL=index.js.map\n","import { ConsoleErrorReporter } from '@actualwave/type-checker-simple-reporting';\r\n\r\nlet errorReporter = ConsoleErrorReporter;\r\n\r\nexport const getErrorReporter = () => errorReporter;\r\n\r\nexport const setErrorReporter = (value) => {\r\n  errorReporter = value;\r\n};\r\n","import { getErrorReporter } from './error-reporter';\n\nexport const MERGE = '(Merge)';\nexport const GET_PROPERTY = '(GetProperty)';\nexport const SET_PROPERTY = '(SetProperty)';\nexport const ARGUMENTS = '(Arguments)';\nexport const RETURN_VALUE = '(ReturnValue)';\n\nexport const checkPrimitiveType = (action, storage, target, names, type) => {\n  if (!type) {\n    return true;\n  }\n\n  const { lastName } = names;\n\n  const missingType = storage.has(lastName) && !storage.hasValue(lastName, type);\n\n  if (missingType) {\n    const errorReporter = getErrorReporter();\n\n    errorReporter(action, names.toString(), storage.list(lastName).join(', '), type);\n  }\n\n  storage.addFor(lastName, type, target);\n\n  return !missingType;\n};\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst hasOwn = (\n  (has) =>\n  (target, property) =>\n  Boolean(target && has.call(target, property))\n)(Object.prototype.hasOwnProperty);\n\nexports.hasOwn = hasOwn;\nexports.default = hasOwn;","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nclass MapOfSets {\n  constructor() {\n    this.storage = new Map();\n  }\n  /**\r\n   * Check if key exists\r\n   * @param {*} key\r\n   */\n\n\n  has(key) {\n    const values = this.storage.get(key);\n    return values && values.size;\n  }\n  /**\r\n   * Check if value exists for key\r\n   * @param {*} key\r\n   * @param {*} value\r\n   */\n\n\n  hasValue(key, value) {\n    const values = this.storage.get(key);\n    return values && values.has(value);\n  }\n  /**\r\n   * Get Set of values for key\r\n   * @param {*} key\r\n   */\n\n\n  get(key) {\n    return this.storage.get(key);\n  }\n  /**\r\n   * List values for key, returns empty array if no key nor values stored\r\n   * @param {*} key\r\n   */\n\n\n  list(key) {\n    const values = this.storage.get(key);\n    return values ? Array.from(values) : [];\n  }\n  /**\r\n   * Call callback for each value of each key\r\n   *  callback (value:*, key:*, storage:*):void\r\n   * @param {Function} callback\r\n   */\n\n\n  forEach(callback) {\n    this.storage.forEach((values, key) => values.forEach(value => callback(value, key, this)));\n  }\n  /**\r\n   * Call callback function for each value of specified key\r\n   *  callback (value:*, key:*, storage:*):void\r\n   * @param {*} key\r\n   * @param {Function} callback\r\n   */\n\n\n  eachValue(key, callback) {\n    const values = this.storage.get(key);\n\n    if (values) {\n      values.forEach(value => callback(value, key, this));\n    }\n  }\n  /**\r\n   * Add to new value to key.\r\n   * @param {*} key\r\n   * @param {*} value\r\n   */\n\n\n  add(key, value) {\n    if (!value) return;\n    const values = this.storage.get(key);\n\n    if (values) {\n      values.add(value);\n    } else {\n      this.storage.set(key, new Set([value]));\n    }\n  }\n  /**\r\n   * Replace all values for key\r\n   * @param {*} key\r\n   * @param {Set} types\r\n   */\n\n\n  set(key, values) {\n    if (!values || values.size === 0) {\n      this.remove(key);\n      return;\n    }\n\n    this.storage.set(key, new Set(values));\n  }\n  /**\r\n   * Remove all values for key\r\n   * @param {*} key\r\n   */\n\n\n  remove(key) {\n    this.storage.delete(key);\n  }\n  /**\r\n   * Remove single value from key\r\n   * @param {*} key\r\n   * @param {*} value\r\n   */\n\n\n  removeValue(key, value) {\n    const values = this.storage.get(key);\n\n    if (values) {\n      values.delete(value);\n\n      if (!values.size) {\n        this.remove(key);\n      }\n    }\n  }\n  /**\r\n   * Clone all key-value stores\r\n   */\n\n\n  clone() {\n    const target = new MapOfSets();\n    this.storage.forEach((values, key) => target.set(key, new Set(values)));\n    return target;\n  }\n\n}\nconst createMapOfSets = () => new MapOfSets();\n\nexports.MapOfSets = MapOfSets;\nexports.createMapOfSets = createMapOfSets;\nexports.default = MapOfSets;\n//# sourceMappingURL=index.js.map\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar hasOwn = _interopDefault(require('@actualwave/has-own'));\nvar MapOfSets = _interopDefault(require('@actualwave/map-of-sets'));\n\n/**\n * Do not check or report type inconsistency\n */\nconst REPORT_NEVER = 'never';\n/**\n * Report type inconsistency once, i.e. record all types and report new\n */\nconst REPORT_ONCE = 'once';\n/**\n * Report whenever type is inconsistent with initial\n */\nconst REPORT_ALL = 'all';\n\nconst REPORT_KEY = Symbol('type-checkers:report-level');\nconst PROPERTY_REPORT_KEY = Symbol('type-checkers:property-report-level');\n\nlet globalReportingLevel = REPORT_ALL;\n\nconst validateReportingLevel = level => {\n  switch (level) {\n    case REPORT_NEVER:\n    case REPORT_ONCE:\n      return level;\n    default:\n      return REPORT_ALL;\n  }\n};\n\nconst setGlobalReportingLevel = level => {\n  globalReportingLevel = validateReportingLevel(level);\n};\n\nconst getGlobalReportingLevel = () => globalReportingLevel;\n\nconst setTargetGeneralReportingLevel = (target, level) => {\n  if (level) {\n    target[REPORT_KEY] = validateReportingLevel(level);\n  } else {\n    delete target[REPORT_KEY];\n  }\n};\n\nconst setTargetPropertyReportingLevel = (target, perPropertyLevels) => {\n  if (!perPropertyLevels) {\n    delete target[PROPERTY_REPORT_KEY];\n    return;\n  }\n\n  target[PROPERTY_REPORT_KEY] = Object.keys(perPropertyLevels).reduce((levels, prop) => {\n    levels[prop] = validateReportingLevel(perPropertyLevels[prop]);\n    return levels;\n  }, {});\n};\n\nconst setReportingLevel = (target, generalLevel, perPropertyLevels) => {\n  setTargetGeneralReportingLevel(target, generalLevel);\n  setTargetPropertyReportingLevel(target, perPropertyLevels);\n};\n\nconst getTargetReportingLevel = (target, key) => {\n  if (hasOwn(target[PROPERTY_REPORT_KEY], key)) {\n    return target[PROPERTY_REPORT_KEY][key];\n  }\n\n  return target[REPORT_KEY];\n};\n\nconst getReportingLevel = (target, key) => {\n  let level = getTargetReportingLevel(target, key);\n\n  if (!level) {\n    level = getTargetReportingLevel(target.constructor, key);\n  }\n\n  return level || getGlobalReportingLevel();\n};\n\n/**\n *\n * @param {any} key\n * @param {Set} target\n * @param {Set} source\n */\nconst defaultMergeStrategy = (key, target, source) => {\n  source.forEach(type => {\n    if (!target.has(type)) {\n      target.add(type);\n    }\n  });\n\n  return target;\n};\n\nclass TypeInfoStorage extends MapOfSets {\n  /**\n   * Add to type information for specified key.\n   * @param {*} key\n   * @param {*} type\n   * @param {Number} level\n   */\n  add(key, type, level) {\n    if (!type) return;\n\n    switch (level) {\n      case REPORT_NEVER:\n        this.remove(key);\n        break;\n      case REPORT_ONCE:\n        super.add(key, type);\n        break;\n      case REPORT_ALL:\n      default:\n        {\n          const types = this.storage.get(key);\n\n          if (!types || !types.size) {\n            this.storage.set(key, new Set([type]));\n          }\n        }\n        break;\n    }\n  }\n\n  addFor(key, type, target) {\n    this.add(key, type, getReportingLevel(target, key));\n  }\n\n  /**\n   * Replace types information for specific key\n   * @param {*} key\n   * @param {Set} types\n   * @param {Number} level\n   */\n  set(key, types, level) {\n    if (!types || types.size === 0 || level === REPORT_NEVER) {\n      this.remove(key);\n      return;\n    }\n\n    super.set(key, types);\n  }\n\n  /**\n   *\n   * @param {*} key\n   * @param {Set} types\n   * @param {Object} target\n   */\n  setFor(key, types, target) {\n    return this.set(key, types, getReportingLevel(target, key));\n  }\n\n  clone() {\n    const target = new TypeInfoStorage();\n    this.storage.forEach((types, key) => target.set(key, new Set(types)));\n\n    return target;\n  }\n\n  /**\n   * Copy types from current storage to storage passed as first argument.\n   * @param {Map} storage\n   * @param {Object} [target]\n   * @param {Function} [mergeStrategy]\n   */\n  copyTo(storage, target, mergeStrategy = defaultMergeStrategy) {\n    this.storage.forEach((types, key) => {\n      const level = validateReportingLevel(target && getReportingLevel(target, key));\n\n      switch (level) {\n        case REPORT_ALL:\n        case REPORT_ONCE:\n          if (storage.has(key)) {\n            storage.set(key, mergeStrategy(key, storage.get(key), types, level), level);\n          } else {\n            storage.set(key, new Set(types));\n          }\n          break;\n        case REPORT_NEVER:\n        default:\n          break;\n      }\n    });\n\n    return storage;\n  }\n}\n\nconst createTypesStorage = () => new TypeInfoStorage();\n\nexports.REPORT_ALL = REPORT_ALL;\nexports.REPORT_NEVER = REPORT_NEVER;\nexports.REPORT_ONCE = REPORT_ONCE;\nexports.createTypesStorage = createTypesStorage;\nexports.defaultMergeStrategy = defaultMergeStrategy;\nexports.getGlobalReportingLevel = getGlobalReportingLevel;\nexports.setGlobalReportingLevel = setGlobalReportingLevel;\nexports.getReportingLevel = getReportingLevel;\nexports.setReportingLevel = setReportingLevel;\n//# sourceMappingURL=index.js.map\n","/* eslint-disable class-methods-use-this */\nimport { createTypesStorage } from '@actualwave/type-checker-levels-storage';\n\nimport { getErrorReporter } from './error-reporter';\n\nimport {\n  MERGE,\n  ARGUMENTS,\n  GET_PROPERTY,\n  RETURN_VALUE,\n  SET_PROPERTY,\n  checkPrimitiveType,\n} from './utils';\n\nclass PrimitiveTypeChecker {\n  constructor(collectTypesOnInit = true, enableGetChecker = true) {\n    this.collectTypesOnInit = collectTypesOnInit;\n    this.enableGetChecker = enableGetChecker;\n  }\n\n  init(target, cachedStorage = null) {\n    let storage;\n\n    if (cachedStorage) {\n      storage = cachedStorage;\n    } else if (this.collectTypesOnInit) {\n      storage = createTypesStorage();\n      Object.keys(target).forEach((key) =>\n        storage.addFor(key, this.getTypeValue(target[key]), target),\n      );\n    }\n\n    return storage;\n  }\n\n  getTypeValue(value) {\n    if (value === undefined) {\n      return '';\n    }\n\n    const type = typeof value;\n\n    if (type === 'object' && value instanceof Array) {\n      return 'array';\n    }\n\n    return type;\n  }\n\n  /**\n   * FIXME add function to @actualwave/type-checker-levels-storage to merge configs\n   * this function should accept storages and merge strategy callback which will\n   * receive type info and decide what should be merged and what not\n   */\n  mergeConfigs(storage, sourceStorage, names) {\n    const errorReporter = getErrorReporter();\n\n    sourceStorage.copyTo(storage, null, (key, target, source) => {\n      const targetFirstValue = target.values().next().value;\n\n      source.forEach((sourceType) => {\n        if (!target.has(sourceType)) {\n          target.add(sourceType);\n\n          if (targetFirstValue) {\n            errorReporter(MERGE, names, targetFirstValue, sourceType);\n          }\n        }\n      });\n\n      return target;\n    });\n  }\n\n  getProperty(target, names, value, storage) {\n    if (!this.enableGetChecker) {\n      return true;\n    }\n\n    const type = this.getTypeValue(value);\n\n    return checkPrimitiveType(GET_PROPERTY, storage, target, names, type);\n  }\n\n  setProperty(target, names, value, storage) {\n    const type = this.getTypeValue(value);\n\n    return checkPrimitiveType(SET_PROPERTY, storage, target, names, type);\n  }\n\n  arguments(target, names, args, storage) {\n    const { length } = args;\n    let valid = true;\n\n    for (let index = 0; index < length; index++) {\n      const type = this.getTypeValue(args[index]);\n      const agrValid = checkPrimitiveType(ARGUMENTS, storage, target, names.clone(index), type);\n\n      valid = agrValid && valid;\n    }\n\n    return valid;\n  }\n\n  returnValue(target, names, value, storage) {\n    const type = this.getTypeValue(value);\n\n    const callNames = names.clone();\n    callNames.appendCustomValue(RETURN_VALUE);\n\n    return checkPrimitiveType(RETURN_VALUE, storage, target, callNames, type);\n  }\n}\n\nexport const createPrimitiveTypeChecker = (collectTypesOnInit = true, enableGetChecker = true) =>\n  new PrimitiveTypeChecker(collectTypesOnInit, enableGetChecker);\n\nexport default PrimitiveTypeChecker;\n"],"names":["Object","defineProperty","exports","value","constructErrorString","action","name","required","received","requiredTypeString","actualTypeString","console","error","warn","receivedTypeString","Error","errorReporter","ConsoleErrorReporter","getErrorReporter","MERGE","GET_PROPERTY","SET_PROPERTY","ARGUMENTS","RETURN_VALUE","checkPrimitiveType","storage","target","names","type","lastName","missingType","has","hasValue","toString","list","join","addFor","hasOwn","property","Boolean","call","prototype","hasOwnProperty","MapOfSets","[object Object]","this","Map","key","values","get","size","Array","from","callback","forEach","add","set","Set","remove","delete","_interopDefault","ex","require$$0","require$$1","REPORT_NEVER","REPORT_ONCE","REPORT_ALL","REPORT_KEY","Symbol","PROPERTY_REPORT_KEY","globalReportingLevel","validateReportingLevel","level","getGlobalReportingLevel","getTargetReportingLevel","getReportingLevel","constructor","defaultMergeStrategy","source","TypeInfoStorage","super","types","mergeStrategy","generalLevel","perPropertyLevels","setTargetGeneralReportingLevel","keys","reduce","levels","prop","setTargetPropertyReportingLevel","PrimitiveTypeChecker","collectTypesOnInit","enableGetChecker","init","cachedStorage","createTypesStorage","getTypeValue","undefined","mergeConfigs","sourceStorage","copyTo","targetFirstValue","next","sourceType","getProperty","setProperty","arguments","args","length","valid","index","clone","returnValue","callNames","appendCustomValue"],"mappings":"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"}