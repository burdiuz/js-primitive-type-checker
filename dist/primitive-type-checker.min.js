!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t(e.PrimitiveTypeChecker={})}(this,function(e){"use strict";const t="(ReturnValue)";function r(e){if(!(this instanceof r))return new r(e);this.value=e}function n(){return this.value}r.prototype.toString=n,r.prototype.valueOf=n,r.prototype[Symbol.toPrimitive]=n;const o=e=>e.reduce((e,t)=>e=t instanceof r?`${e}${t}`:String(parseInt(t,10))===t?`${e}[${t}]`:/^[a-z][\w$]*$/i.test(t)?e?`${e}.${t}`:t:`${e}["${t}"]`,""),s=(e,t,r,n,s,i)=>{if(!n)return!0;const p=t[r];if(p){if(p!==n)return s(e,o([...i,r]),p,n),!1}else t[r]=n;return!0},i=({types:e,errorReporter:t},r,n=[])=>{const s=r.types;for(const r in s)if(s.hasOwnProperty(r)){const i=s[r],p=e[r];i&&p&&p!==i?t("(Merge)",o([...n,r]),p,i):e[r]=i}return{types:e,errorReporter:t}},p=e=>void 0===e?"":e instanceof Array?"array":typeof e,u={collectTypesOnInit:!0,areArrayElementsOfSameType:!0,init(e,t,r=null){let n={};return r?n=r:this.collectTypesOnInit&&Object.keys(e).forEach(t=>{n[t]=p(e[t])}),{types:n,errorReporter:t}},getProperty(e,t,r,n,o){const{types:i,errorReporter:u}=n,y=p(r);return s("(GetProperty)",i,t,y,u,o)},setProperty(e,t,r,n,o){const{types:i,errorReporter:u}=n,y=p(r);return s("(SetProperty)",i,t,y,u,o)},arguments(e,t,r,n,o){const{types:i,errorReporter:u}=n,{length:y}=r;let c=!0;for(let e=0;e<y;e++){const t=p(r[e]);c=s("(Arguments)",i,String(e),t,u,o)&&c}return c},returnValue(e,n,o,i,u){const{types:y,errorReporter:c}=i,f=p(o);return s(t,y,r(t),f,c,u)},getTypeString:p,mergeConfigs:i};e.mergeConfigs=i,e.getTypeString=p,e.default=u,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=primitive-type-checker.min.js.map
