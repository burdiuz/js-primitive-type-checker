!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t(e.PrimitiveTypeChecker={})}(this,function(e){"use strict";var t,r,o=(function(e,t){Object.defineProperty(t,"__esModule",{value:!0});const r=(e=>(t,r)=>Boolean(t&&e.call(t,r)))(Object.prototype.hasOwnProperty);t.hasOwn=r,t.default=r}(t={exports:{}},t.exports),t.exports),n=(r=o)&&r.__esModule&&Object.prototype.hasOwnProperty.call(r,"default")?r.default:r;o.hasOwn;const s="(Arguments)",i="(ReturnValue)";function p(e){if(!(this instanceof p))return new p(e);this.value=e}function c(){return this.value}p.prototype.toString=c,p.prototype.valueOf=c,p.prototype[Symbol.toPrimitive]=c;const u=e=>e.reduce((e,t)=>t instanceof p?`${e}${t}`:String(parseInt(t,10))===t?`${e}[${t}]`:/^[a-z][\w$]*$/i.test(t)?e?`${e}.${t}`:t:`${e}["${t}"]`,""),y=(e,t,r,o,n,s)=>{if(!o)return!0;const i=t[r];if(i){if(i!==o)return n(e,u([...s,r]),i,o),!1}else t[r]=o;return!0},l=({types:e,errorReporter:t},r,o=[])=>{const s=r.types;for(const r in s)if(n(s,r)){const n=s[r],i=e[r];n&&i&&i!==n?t("(Merge)",u([...o,r]),i,n):e[r]=n}return{types:e,errorReporter:t}},a=e=>void 0===e?"":e instanceof Array?"array":typeof e,f=e=>{return function(t,r,o,n,s){const{types:i,errorReporter:p}=n,c=this.getTypeString(o);return y(e,i,r,c,p,s)}},g=f("(GetProperty)"),h=f("(SetProperty)");e.MERGE="(Merge)",e.ARGUMENTS=s,e.GET_PROPERTY="(GetProperty)",e.RETURN_VALUE=i,e.SET_PROPERTY="(SetProperty)",e.buildPath=u,e.AsIs=p,e.checkPrimitiveType=y,e.mergeConfigs=l,e.getTypeString=a,e.propertyCheckerFactory=f,e.default=class{constructor(){this.collectTypesOnInit=!0,this.getTypeString=a,this.mergeConfigs=l}init(e,t,r=null){let o={};return r?o=r:this.collectTypesOnInit&&Object.keys(e).forEach(t=>{o[t]=a(e[t])}),{types:o,errorReporter:t}}getProperty(e,t,r,o,n){return g.call(this,e,t,r,o,n)}setProperty(e,t,r,o,n){return h.call(this,e,t,r,o,n)}arguments(e,t,r,o,n){const{types:i,errorReporter:p}=o,{length:c}=r;let u=!0;for(let e=0;e<c;e++){const t=this.getTypeString(r[e]);u=y(s,i,String(e),t,p,n)&&u}return u}returnValue(e,t,r,o,n){const{types:s,errorReporter:c}=o,u=this.getTypeString(r);return y(i,s,p(i),u,c,n)}},Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=primitive-type-checker.min.js.map
