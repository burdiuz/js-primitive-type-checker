!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@actualwave/primitive-type-checker/utils")):"function"==typeof define&&define.amd?define(["exports","@actualwave/primitive-type-checker/utils"],t):t(e.PrimitiveTypeChecker={},e.utils)}(this,function(e,t){"use strict";const r=(e=>(t,r)=>Boolean(t&&e.call(t,r)))(Object.prototype.hasOwnProperty),i=({types:e,errorReporter:i},o,n=[])=>{const s=o.types;for(const o in s)if(r(s,o)){const r=s[o],c=e[o];r&&c&&c!==r?i(t.MERGE,t.buildPath([...n,o]),c,r):e[o]=r}return{types:e,errorReporter:i}},o=e=>void 0===e?"":e instanceof Array?"array":typeof e,n=e=>{return function(r,i,o,n,s){const{types:c,errorReporter:p}=n,y=this.getTypeString(o);return t.checkPrimitiveType(e,c,i,y,p,s)}},s=n(t.GET_PROPERTY),c=n(t.SET_PROPERTY);e.mergeConfigs=i,e.getTypeString=o,e.propertyCheckerFactory=n,e.default=class{constructor(){this.collectTypesOnInit=!0,this.getTypeString=o,this.mergeConfigs=i}init(e,t,r=null){let i={};return r?i=r:this.collectTypesOnInit&&Object.keys(e).forEach(t=>{i[t]=o(e[t])}),{types:i,errorReporter:t}}getProperty(e,t,r,i,o){return s.call(this,e,t,r,i,o)}setProperty(e,t,r,i,o){return c.call(this,e,t,r,i,o)}arguments(e,r,i,o,n){const{types:s,errorReporter:c}=o,{length:p}=i;let y=!0;for(let e=0;e<p;e++){const r=this.getTypeString(i[e]);y=t.checkPrimitiveType(t.ARGUMENTS,s,String(e),r,c,n)&&y}return y}returnValue(e,r,i,o,n){const{types:s,errorReporter:c}=o,p=this.getTypeString(i);return t.checkPrimitiveType(t.RETURN_VALUE,s,t.AsIs(t.RETURN_VALUE),p,c,n)}},Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=primitive-type-checker.min.js.map
