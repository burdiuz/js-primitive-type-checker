{"version":3,"file":"index.js","sources":["source/error-reporter.js","source/utils.js","source/checker.js"],"sourcesContent":["import { ConsoleErrorReporter } from '@actualwave/type-checker-simple-reporting';\n\nlet errorReporter = ConsoleErrorReporter;\n\nexport const getErrorReporter = () => errorReporter;\n\nexport const setErrorReporter = (value) => {\n  errorReporter = value;\n};\n","import { getErrorReporter } from './error-reporter';\n\nexport const MERGE = '(Merge)';\nexport const GET_PROPERTY = '(GetProperty)';\nexport const SET_PROPERTY = '(SetProperty)';\nexport const ARGUMENTS = '(Arguments)';\nexport const RETURN_VALUE = '(ReturnValue)';\n\nexport const checkPrimitiveType = (storage, key, type) => {\n  return !storage.has(key) || storage.hasValue(key, type);\n};\n\nexport const getTypeValue = (value) => {\n  if (value === undefined) {\n    return '';\n  }\n\n  const type = typeof value;\n\n  if (type === 'object' && value instanceof Array) {\n    return 'array';\n  }\n\n  return type;\n};\n","/* eslint-disable class-methods-use-this */\nimport { createTypesStorage } from '@actualwave/type-checker-levels-storage';\n\nimport { getErrorReporter } from './error-reporter';\n\nimport {\n  MERGE,\n  ARGUMENTS,\n  GET_PROPERTY,\n  RETURN_VALUE,\n  SET_PROPERTY,\n  checkPrimitiveType,\n  getTypeValue,\n} from './utils';\n\nclass PrimitiveTypeChecker {\n  constructor(collectTypesOnInit = true, enableGetChecker = true) {\n    this.collectTypesOnInit = collectTypesOnInit;\n    this.enableGetChecker = enableGetChecker;\n  }\n\n  init(target, cachedStorage = null) {\n    let storage;\n\n    if (cachedStorage) {\n      storage = cachedStorage;\n    } else if (this.collectTypesOnInit) {\n      storage = createTypesStorage();\n      Object.keys(target).forEach((key) =>\n        storage.addFor(key, this.getTypeValue(target[key]), target),\n      );\n    }\n\n    return storage;\n  }\n\n  getTypeValue(value) {\n    return getTypeValue(value);\n  }\n\n  checkValueType(action, storage, target, names, type) {\n    if (!type) {\n      return true;\n    }\n\n    const { lastName } = names;\n\n    const compatible = this.isTypeCompatible(storage, lastName, type, target);\n\n    if (!compatible) {\n      const errorReporter = getErrorReporter();\n\n      errorReporter(action, names.toString(), storage.list(lastName).join(', '), type);\n    }\n\n    storage.addFor(lastName, type, target);\n\n    return compatible;\n  }\n\n  isTypeCompatible(storage, key, type) {\n    return checkPrimitiveType(storage, key, type);\n  }\n\n  /**\n   * FIXME add function to @actualwave/type-checker-levels-storage to merge configs\n   * this function should accept storages and merge strategy callback which will\n   * receive type info and decide what should be merged and what not\n   */\n  mergeConfigs(storage, sourceStorage, names) {\n    const errorReporter = getErrorReporter();\n\n    sourceStorage.copyTo(storage, null, (key, target, source) => {\n      const targetFirstValue = target.values().next().value;\n\n      source.forEach((sourceType) => {\n        if (!target.has(sourceType)) {\n          target.add(sourceType);\n\n          if (targetFirstValue) {\n            errorReporter(MERGE, names, targetFirstValue, sourceType);\n          }\n        }\n      });\n\n      return target;\n    });\n  }\n\n  getProperty(target, names, value, storage) {\n    if (!this.enableGetChecker) {\n      return true;\n    }\n\n    const type = this.getTypeValue(value);\n\n    return this.checkValueType(GET_PROPERTY, storage, target, names, type);\n  }\n\n  setProperty(target, names, value, storage) {\n    const type = this.getTypeValue(value);\n\n    return this.checkValueType(SET_PROPERTY, storage, target, names, type);\n  }\n\n  arguments(target, names, args, storage) {\n    const { length } = args;\n    let valid = true;\n\n    for (let index = 0; index < length; index++) {\n      const type = this.getTypeValue(args[index]);\n      const agrValid = this.checkValueType(ARGUMENTS, storage, target, names.clone(index), type);\n\n      valid = agrValid && valid;\n    }\n\n    return valid;\n  }\n\n  returnValue(target, names, value, storage) {\n    const type = this.getTypeValue(value);\n\n    const callNames = names.clone();\n    callNames.appendCustomValue(RETURN_VALUE);\n\n    return this.checkValueType(RETURN_VALUE, storage, target, callNames, type);\n  }\n}\n\nexport const createPrimitiveTypeChecker = (collectTypesOnInit = true, enableGetChecker = true) =>\n  new PrimitiveTypeChecker(collectTypesOnInit, enableGetChecker);\n\nexport default PrimitiveTypeChecker;\n"],"names":["errorReporter","ConsoleErrorReporter","getErrorReporter","setErrorReporter","value","MERGE","GET_PROPERTY","SET_PROPERTY","ARGUMENTS","RETURN_VALUE","checkPrimitiveType","storage","key","type","has","hasValue","getTypeValue","undefined","Array","PrimitiveTypeChecker","constructor","collectTypesOnInit","enableGetChecker","init","target","cachedStorage","createTypesStorage","Object","keys","forEach","addFor","checkValueType","action","names","lastName","compatible","isTypeCompatible","toString","list","join","mergeConfigs","sourceStorage","copyTo","source","targetFirstValue","values","next","sourceType","add","getProperty","setProperty","arguments","args","length","valid","index","agrValid","clone","returnValue","callNames","appendCustomValue","createPrimitiveTypeChecker"],"mappings":"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"}