{"version":3,"file":"index.js","sources":["source/error-reporter.js","source/utils.js","source/checker.js","source/index.js"],"sourcesContent":["import { ConsoleErrorReporter } from '@actualwave/type-checker-simple-reporting';\r\n\r\nlet errorReporter = ConsoleErrorReporter;\r\n\r\nexport const getErrorReporter = () => errorReporter;\r\n\r\nexport const setErrorReporter = (value) => {\r\n  errorReporter = value;\r\n};\r\n","import { getErrorReporter } from './error-reporter';\n\nexport const MERGE = '(Merge)';\nexport const GET_PROPERTY = '(GetProperty)';\nexport const SET_PROPERTY = '(SetProperty)';\nexport const ARGUMENTS = '(Arguments)';\nexport const RETURN_VALUE = '(ReturnValue)';\n\nexport const checkPrimitiveType = (action, storage, target, names, type) => {\n  if (!type) {\n    return true;\n  }\n\n  const { lastName } = names;\n\n  const storedType = storage.hasType(lastName);\n\n  if (storedType) {\n    if (storedType !== type) {\n      const errorReporter = getErrorReporter();\n\n      errorReporter(action, names.toString(), storedType, type);\n\n      return false;\n    }\n  } else {\n    storage.addFor(lastName, type, target);\n  }\n\n  return true;\n};\n","/* eslint-disable class-methods-use-this */\nimport { createTypesStorage } from '@actualwave/type-checker-levels-storage';\n\nimport { getErrorReporter } from './error-reporter';\n\nimport {\n  MERGE,\n  ARGUMENTS,\n  GET_PROPERTY,\n  RETURN_VALUE,\n  SET_PROPERTY,\n  checkPrimitiveType,\n} from './utils';\n\nclass PrimitiveTypeChecker {\n  constructor(collectTypesOnInit = true) {\n    this.collectTypesOnInit = collectTypesOnInit;\n  }\n\n  init(target, cachedStorage = null) {\n    let storage;\n\n    if (cachedStorage) {\n      storage = cachedStorage;\n    } else if (this.collectTypesOnInit) {\n      storage = createTypesStorage();\n      Object.keys(target).forEach((key) =>\n        storage.addFor(key, this.getTypeValue(target[key]), target),\n      );\n    }\n\n    return storage;\n  }\n\n  getTypeValue(value) {\n    if (value === undefined) {\n      return '';\n    }\n\n    const type = typeof value;\n\n    if (type === 'object' && value instanceof Array) {\n      return 'array';\n    }\n\n    return type;\n  }\n\n  /**\n   * FIXME add function to @actualwave/type-checker-levels-storage to merge configs\n   * this function should accept storages and merge strategy callback which will\n   * receive type info and decide what should be merged and what not\n   */\n  mergeConfigs(storage, sourceStorage, names) {\n    const errorReporter = getErrorReporter();\n\n    sourceStorage.copyTo(storage, null, (key, target, source) => {\n      const targetFirstValue = target.values().next().value;\n\n      source.forEach((sourceType) => {\n        if (!target.has(sourceType)) {\n          target.add(sourceType);\n\n          if (targetFirstValue) {\n            errorReporter(MERGE, names, targetFirstValue, sourceType);\n          }\n        }\n      });\n\n      return target;\n    });\n  }\n\n  getProperty(target, names, value, storage) {\n    const type = this.getTypeValue(value);\n\n    /**\n     * FIXME this function also stores new type information, so it must receive target\n     * or reporting level to work properly\n     * or callback to store new type value\n     */\n    return checkPrimitiveType(GET_PROPERTY, storage, target, names, type);\n  }\n\n  setProperty(target, names, value, storage) {\n    const type = this.getTypeValue(value);\n\n    return checkPrimitiveType(SET_PROPERTY, storage, target, names, type);\n  }\n\n  arguments(target, names, args, storage) {\n    const { length } = args;\n    let valid = true;\n\n    for (let index = 0; index < length; index++) {\n      const type = this.getTypeValue(args[index]);\n      const agrValid = checkPrimitiveType(ARGUMENTS, storage, target, names.clone(index), type);\n\n      valid = agrValid && valid;\n    }\n\n    return valid;\n  }\n\n  returnValue(target, names, value, storage) {\n    const type = this.getTypeValue(value);\n\n    const callNames = storage.clone();\n    callNames.appendCustomValue(RETURN_VALUE);\n\n    return checkPrimitiveType(RETURN_VALUE, storage, target, callNames, type);\n  }\n}\n\nexport const createPrimitiveTypeChecker = (collectTypesOnInit) =>\n  new PrimitiveTypeChecker(collectTypesOnInit);\n\nexport default PrimitiveTypeChecker;\n","/* eslint-disable class-methods-use-this */\nimport { getErrorReporter, setErrorReporter } from './error-reporter';\n\nimport {\n  MERGE,\n  ARGUMENTS,\n  GET_PROPERTY,\n  RETURN_VALUE,\n  SET_PROPERTY,\n  checkPrimitiveType,\n} from './utils';\n\nimport PrimitiveTypeChecker, { createPrimitiveTypeChecker } from './checker';\n\nexport {\n  MERGE,\n  ARGUMENTS,\n  GET_PROPERTY,\n  RETURN_VALUE,\n  SET_PROPERTY,\n  checkPrimitiveType,\n  PrimitiveTypeChecker,\n  createPrimitiveTypeChecker,\n  getErrorReporter,\n  setErrorReporter,\n};\n"],"names":["errorReporter","ConsoleErrorReporter","getErrorReporter","setErrorReporter","value","MERGE","GET_PROPERTY","SET_PROPERTY","ARGUMENTS","RETURN_VALUE","checkPrimitiveType","action","storage","target","names","type","lastName","storedType","hasType","toString","addFor","PrimitiveTypeChecker","collectTypesOnInit","cachedStorage","createTypesStorage","keys","forEach","key","getTypeValue","undefined","Array","sourceStorage","copyTo","source","targetFirstValue","values","next","sourceType","has","add","args","length","valid","index","agrValid","clone","callNames","appendCustomValue","createPrimitiveTypeChecker"],"mappings":"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"}